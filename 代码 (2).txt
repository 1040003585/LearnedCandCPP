#include<iostream>
using namespace std;
int man()
{
	int max;
	cout << "How many golf scores you want input: ";
	while (!(cin >> max))
	{
		cout << "input error!\n"
			<< "please resume load: ";
		cin.clear();
		cin.sync();
	}
	int *score = new int[max];
	cout << "please enter your golf scores.\n";
	int i;
	for (i = 0; i < max; i++)
	{
		cout << "score#" << i + 1 << " :";
		while (!(cin >> score[i]))
		{
			cin.clear();
			while (cin.get() != '\n')
				continue;
			cout << "scores input error!\n"
				<< "please resume load: ";
		}
	}
	double total = 0.0;
	for (i = 0; i < max; i++)
		total += score[i];
	cout << "the " << max << " rounds aeverage score is " << total / max;
	delete[] score;
	delete score;
	return 0;
} 





#include<stdio.h>
#include<stdlib.h>
#include<windows.h>
int len = 0;            //记录链表长度
typedef struct student
{
	int id;
	float score;
	struct student *next;
}NODE;
NODE *head, *tail;
void select_();
void input_();
void insert_();
void delete_();
void search_();
void id_sort_();
void score_sort_();
void output_();
int main()
{
	head = (NODE *)malloc(sizeof(NODE));
	if (head == NULL)
	{
		printf("内存分配失败，程序退出！\n");
		exit(0);
	}
	head->next = NULL;
	tail = head;
	select_();
	return 0;
}
void select_()
{
	int k = 0;
	while (1)
	{
		printf("******************菜单******************\n");
		printf("              1,输入成绩                \n");
		printf("              2,插入成绩                \n");
		printf("              3,删除成绩                \n");
		printf("              4,查找成绩                \n");
		printf("              5,输出成绩                \n");
		printf("              6,退出系统                \n");
		printf("****************************************\n");
		printf("请输入编号，选择功能:");
		scanf_s("%d", &k, 1);
		if (k == 6)
		{
			system("cls");
			printf("谢");
			Sleep(100);
			printf("谢");
			Sleep(100);
			printf("您");
			Sleep(100);
			printf("的");
			Sleep(100);
			printf("使");
			Sleep(100);
			printf("用");
			Sleep(100);
			printf(",");
			Sleep(100);
			printf("再");
			Sleep(100);
			printf("见");
			Sleep(100);
			printf("!\n");
			Sleep(100);
			return;
		}
		switch (k)
		{
		case 1:
			input_();
			system("cls");
			break;
		case 2:
			insert_();
			if (head->next != NULL)
			{
				printf("数据正在插入，请稍等。。。。。。\n");
				Sleep(2000);
				printf("插入成功！\n");
				Sleep(1000);
				system("cls");
			}
			break;
		case 3:
			delete_();
			break;
		case 4:
			search_();
			break;
		case 5:
			output_();
			Sleep(1000);
			system("cls");
			break;
		default:
			printf("无该选项，请重新输入!\n");
			Sleep(3000);
			system("cls");
			break;
		}
	}
}
void input_()
{
	NODE *pnew;
	printf("id等于0时结束！\n");
	printf("编号\t成绩(请以tab间隔!)\n");
	while (1)
	{
		pnew = (NODE *)malloc(sizeof(NODE));
		if (pnew == NULL)
		{
			printf("分配内存失败，无法入录成绩!\n");
			return;
		}
		else
		{
			scanf_s("%d\t%f", &pnew->id, &pnew->score, 2);
			pnew->next = NULL;
			if (pnew->id != 0)
			{
				if (pnew->id<0)
				{
					printf("id不能为负数，请重新输入!\n");
					free(pnew);
					continue;
				}
				if (pnew->score<0)
				{
					printf("成绩不能为负数,请重新输入!\n");
					free(pnew);
					continue;
				}
				if (head->next == NULL || len == 0)
				{
					head->next = pnew;
					tail = head;
					tail = tail->next;
				}
				else
				{
					tail->next = pnew;
					head = tail;
					tail = tail->next;
				}
				++len;
			}
			else
			{
				free(pnew);
				return;
			}

		}
	}
}
void insert_()
{
	int id = 0;
	NODE *pnew;
	NODE *p = head;
	if (head->next == NULL || len==0)
	{
		head->next = NULL;
		printf("数据为空,无法插入,程序正在返回主菜单。。。。。。\n");
		Sleep(2000);
		system("cls");
		return;
	}
	while (1)
	{
		pnew = (NODE *)malloc(sizeof(NODE));
		if (pnew == NULL)
		{
			printf("分配失败，返回菜单！\n");
			return;
		}
		pnew->next = NULL;
		printf("请输入插入点(插入到该id之后！)：");
		scanf_s("%d", &id, 1);        //插入到该结点之后
		while (p != NULL)
		{
			if (p->next->id == id)
			{
				printf("编号\t成绩(id等于0时，放弃插入，返回菜单！)\n");
				scanf_s("%d%f", pnew->id, pnew->score, 2);
				if (pnew->id == 0)
				{
					free(pnew);
					return;
				}
				if (pnew->id<0 || pnew->score<0)
				{
					printf("成绩或id不能为负数，请重新输入！\n");
					continue;
				}
				pnew->next = p->next->next;
				p->next->next = pnew;
				++len;
				return;
			}
			p = p->next;
		}
		printf("查询不到该id，请重新输入！\n");
		continue;
	}

}                                       //已检查完！
void delete_()
{
	int id = 0;
	NODE *q = head;
	NODE *p = NULL;
	while (1)
	{
		if (head->next == NULL || len == 0)
		{
			head->next = NULL;
			printf("数据为空,无法删除,程序正在返回主菜单。。。。。。\n");
			Sleep(2000);
			system("cls");
			return;
		}
		printf("请输入要删除的id:");
		scanf_s("%d", &id, 1);
		while (q != NULL)
		{
			if (q->id == id)
			{
				p = q;
				q = q->next;
				free(p);
				--len;
				printf("正在删除。。。。。。\n");
				Sleep(2000);
				printf("删除成功！\n");
				Sleep(1000);
				system("cls");
				return;
			}
			else
			{
				q = q->next;
			}
		}
		printf("查询不到该id，请重新输入！\n");
		continue;
	}
} 

void search_()
{
	int id = 0;
	NODE *q = head;
	while (1)
	{
		if (head->next == NULL || len == 0)
		{
			printf("数据为空,无法查找,程序正在返回主菜单。。。。。。\n");
			Sleep(2000);
			system("cls");
			return;
		}
		printf("请输入要查询的id:");
		scanf_s("%d", &id, 1);
		while (q != NULL)
		{
			if (q->id == id)
			{
				system("cls");
				printf("编号\t成绩\n");
				printf("%d\t%f\n", q->id, q->score);
				return;
			}
			else
			{
				q = q->next;
			}
		}
		printf("查询不到该id，请重新输入！\n");
		continue;
	}
}
void id_sort_()
{
	int i = 0;
	int j = 0;
	int k = 0;
	int length = len;
	float f = 0;
	NODE *p, *q, *r = head->next;
	for (i = 0, p = head->next; i<length - 1; ++i, p = p->next)
	{
		for (j = i + 1, q = p->next; j<length; ++j, q = q->next)
		{
			if (p->id>q->id)
			{
				k = p->id;
				p->id = q->id;
				q->id = k;
				f = p->score;
				p->score = q->score;
				q->score = f;
			}
		}
	}
	printf("编号\t成绩\n");
	for (i = 0; i<length; ++i)
	{
		printf("%d\t%f\n", r->id, r->score);
		r = r->next;
	}
}
void score_sort_()
{
	int i = 0;
	int j = 0;
	int k = 0;
	int length = len;
	float f = 0;
	NODE *p, *q, *r = head->next;
	for (i = 0, p = head->next; i<length - 1; ++i, p = p->next)
	{
		for (j = i + 1, q = p->next; j<length; ++j, q = q->next)
		{
			if (p->score>q->score)
			{
				f = p->score;
				p->score = q->score;
				q->score = f;
				k = p->id;
				p->id = q->id;
				q->id = k;
			}
		}
	}
	printf("编号\t成绩\n");
	for (i = 0; i<length; ++i)
	{
		printf("%d\t%f\n", r->id, r->score);
		r = r->next;
	}
}
void output_()
{
	int a = 0;
	if (head->next == NULL || len == 0)
	{
		printf("数据为空，请选择1功能插入数据！\n");
		return;
	}
	system("cls");
	printf("请选择排序方式\n");
	printf("1,I D 排序\n");
	printf("2,成绩排序\n");
	printf("3,返回菜单\n");
	while (1)
	{
		printf("请输入编号，选择功能：");
		scanf_s("%d", &a, 1);
		switch (a)
		{
		case 1:
			id_sort_();
			break;
		case 2:
			score_sort_();
			break;
		case 3:
			return;
		default:
			printf("无该选项，请重新输入!\n");
			break;
		}
	}
} 
